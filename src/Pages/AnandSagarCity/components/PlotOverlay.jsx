import React, { useState } from 'react';
import { plotData } from '../data/plotDetails';

// Helper function to calculate the centroid of a path
const calculateCentroid = (pathD) => {
    const coordinates = pathD.split(/[MLZ]/).filter(Boolean).map(coord => 
      coord.trim().split(/[,\s]+/).map(Number)
    );
    
    let sumX = 0;
    let sumY = 0;
    let count = 0;
    
    coordinates.forEach(coord => {
      for (let i = 0; i < coord.length; i += 2) {
        if (!isNaN(coord[i]) && !isNaN(coord[i + 1])) {
          sumX += coord[i];
          sumY += coord[i + 1];
          count++;
        }
      }
    });
    
    return {
      x: sumX / count,
      y: sumY / count
    };
  };
  
  // Plot path data with their coordinates and actual plot numbers
  const plotPaths = {
    // New Plots from svg.txt
    'P1': "M135 173.5L179 169L204 420L57 433L135 173.5Z",
    'P2': "M538.5 146L774.5 130.5L782.5 220L546.5 235.5L538.5 146Z",
    'P3': "M311 73L480 61L483.5 104L314 114L311 73Z",
    'P4': "M792.5 41L960.5 30L964 70.5L796.5 82L792.5 41Z",
    'P5': "M1082.5 115.837L1089.5 108.337L1185 101.837L1191 189.837L1105 247.837L1097.5 245L1092.5 241.837L1082.5 115.837Z",
    'P6': "M537.5 146.5L499.5 148L496.599 151.114L494.049 154L493 158L494.049 166.5L496.5 188.5L519.935 187.546L541 186.5L537.5 146.5Z",
    'P7': "M496.5 189.043L541.542 187L543.5 209.5L498 212L496.5 189.043Z",
    'P8': "M546 235.746L505.5 238L500.5 234L498.885 230.5L498.885 224.246L498.5 211.5L519 210.5L543.5 209.5L546 235.746Z",
    'P9': "M418.436 153.4L455.571 151.368L460.349 154.028L463.87 159.17L466.362 169.468L467.802 191.624L435.174 192.943L422.043 193.422L418.436 153.4Z",
    'P10': "M470.226 212.463L425.231 214.737L423.767 194.118L468.314 192.26L470.226 212.463Z",
    'P11': "M297.155 160.322L334.29 158.289L339.069 160.95L342.59 166.091L345.082 176.389L346.522 198.545L313.894 199.864L300.763 200.343L297.155 160.322Z",
    'P12': "M302.22 200.8L347.261 198.921L349.22 219.621L303.72 221.921L302.22 200.8Z",
    'P13': "M312.22 303.964L357.261 301.921L360.22 324.421L313.72 326.921L312.22 303.964Z",
    'P14': "M315.22 326.964L360.261 324.921L362.22 346.921L317.22 347.921L315.22 326.964Z",
    'P15': "M317.22 347.898L362.241 346.921L364.72 367.921L319.22 368.921L317.22 347.898Z",
    'P16': "M320.22 368.944L365.241 367.921L367.22 388.386L322.199 389.921L320.22 368.944Z",
    'P17': "M310.22 284.719L355.261 282.921L357.22 302.721L311.72 304.921L310.22 284.719Z",
    'P18': "M308.22 263.8L353.261 261.921L355.22 282.621L309.72 284.921L308.22 263.8Z",
    'P19': "M306.22 242.8L351.261 240.921L353.22 261.621L307.72 263.921L306.22 242.8Z",
    'P20': "M304.22 221.8L349.261 219.921L351.22 240.621L305.72 242.921L304.22 221.8Z",
    'P21': "M179.235 168.322L216.37 166.289L221.149 168.95L224.67 174.091L227.162 184.389L228.602 206.545L195.974 207.864L182.843 208.343L179.235 168.322Z",
    'P22': "M184.3 208.8L229.341 206.921L231.3 227.621L185.8 229.921L184.3 208.8Z",
    'P23': "M194.3 311.964L239.341 309.921L242.3 332.421L195.8 334.921L194.3 311.964Z",
    'P24': "M197.3 334.964L242.341 332.921L244.3 354.921L199.3 355.921L197.3 334.964Z",
    'P25': "M199.3 355.898L244.321 354.921L246.8 375.921L201.3 376.921L199.3 355.898Z",
    'P26': "M202.3 376.944L247.321 375.921L249.3 396.386L204.279 397.921L202.3 376.944Z",
    'P27': "M192.3 292.719L237.341 290.921L239.3 310.721L193.8 312.921L192.3 292.719Z",
    'P28': "M190.3 271.8L235.341 269.921L237.3 290.621L191.8 292.921L190.3 271.8Z",
    'P29': "M188.3 250.8L233.341 248.921L235.3 269.621L189.8 271.921L188.3 250.8Z",
    'P30': "M186.3 229.8L231.341 227.921L233.3 248.621L187.8 250.921L186.3 229.8Z",
    'P31': "M267.5 75.5L224.5 78L226.479 124L271.5 119.818L267.5 75.5Z",
    'P32': "M481.5 61L522.5 58L525.5 101.5L484.5 104.5L481.5 61Z",
    'P33': "M525.5 58L566.5 55L569.5 98.5L528.5 101.5L525.5 58Z",
    'P34': "M567.5 55L615.433 52L616.5 86.8148L615.433 91.1667L612.233 94.6481L569.567 99L567.5 55Z",
    'P35': "M706.433 46.5L660.567 48L659.5 82.8148L660.567 87.1667L667 92L709 89.5L706.433 46.5Z",
    'P36': "M708.5 45L749.5 42L752.5 85.5L711.5 88.5L708.5 45Z",
    'P37': "M750.5 42L791.5 39L794.5 82.5L753.5 85.5L750.5 42Z",
    'P38': "M433.5 297.043L478.542 295L481.5 317.5L435 320L433.5 297.043Z",
    'P39': "M436.5 320.043L481.542 318L483.5 340L438.5 341L436.5 320.043Z",
    'P40': "M438.5 340.977L483.521 340L486 361L440.5 362L438.5 340.977Z",
    'P41': "M441.5 362.023L486.521 361L488.5 381.465L443.479 383L441.5 362.023Z",
    'P42': "M431.5 277.797L476.542 276L478.5 295.8L433 298L431.5 277.797Z",
    'P43': "M429.5 256.879L474.542 255L476.5 275.7L431 278L429.5 256.879Z",
    'P44': "M427.5 235.879L472.542 234L474.5 254.7L429 257L427.5 235.879Z",
    'P45': "M425.5 214.879L470.542 213L472.5 233.7L427 236L425.5 214.879Z",
    'P46': "M1188 133.5L1238.5 131L1224.5 167L1192 189L1188 133.5Z",
    'P47': "M775.5 130L814.5 128L817.5 129L820 131.5L821 135.5L823.5 167.5L779 170.5L775.5 130Z",
    'P48': "M779.5 172L824 169.5L825.5 191L781 193L779.5 172Z",
    'P49': "M782 195L826 193L827 213L826 215.5L823 217.5L783 220L782 195Z",
    'P50': "M786.5 247.5L822.5 245L825 245.5L828 248L830.5 250L831.5 253.5L833 269L788.5 271L786.5 247.5Z",
    'P51': "M789 272L833.5 270L835 290L790 292.5L789 272Z",
    'P52': "M790.5 294L835 292L836.5 312L791.5 314.5L790.5 294Z",
    'P53': "M792.5 316L837 314L838.5 334L793.5 336.5L792.5 316Z",
    'P54': "M794.5 338L839 336L840.5 356L796 358L794.5 338Z",
    'P55': "M796.5 359.5L841 357.5L842.5 377.5L798.5 380L796.5 359.5Z",
    'P56': "M418.232 153.451L380.5 154L375.006 156.533L373.528 162.657L373.554 169.808L376.65 194.85L402.667 194.949L421.68 195.021L418.232 153.451Z",
    'P57': "M422.5 195H376.5L378.5 217L424 215L422.5 195Z",
    'P58': "M429.5 256.562L382.5 258L384 280L431.5 278.5L429.5 256.562Z",
    'P59': "M431.5 278L384.5 279.349L386 300L433.5 298.592L431.5 278Z",
    'P60': "M433.5 298L386.5 299.472L388 322L435.5 320.464L433.5 298Z",
    'P61': "M427 236.5L380.5 237.5L382 258.5L429 257L427 236.5Z",
    'P62': "M424 215L378.458 217L380.5 238L426.5 237L424 215Z",
    'P63': "M296.952 160.372L259.22 160.921L253.726 163.454L252.247 169.578L252.274 176.73L255.37 201.771L281.387 201.87L300.4 201.942L296.952 160.372Z",
    'P64': "M301.22 201.921H255.22L257.22 223.921L302.72 221.921L301.22 201.921Z",
    'P65': "M308.22 263.484L261.22 264.921L262.72 286.921L310.22 285.421L308.22 263.484Z",
    'P66': "M310.22 284.921L263.22 286.27L264.72 306.921L312.22 305.513L310.22 284.921Z",
    'P67': "M312.22 304.921L265.22 306.393L266.72 328.921L314.22 327.385L312.22 304.921Z",
    'P68': "M305.72 243.421L259.22 244.421L260.72 265.421L307.72 263.921L305.72 243.421Z",
    'P69': "M302.72 221.921L257.178 223.921L259.22 244.921L305.22 243.921L302.72 221.921Z",
    'P70': "M318.22 348.921L271.22 350.27L272.72 370.921L320.22 369.513L318.22 348.921Z",
    'P71': "M322.22 389.921L275.22 391.359L276.72 413.359L324.22 411.859L322.22 389.921Z",
    'P72': "M320.22 369.921L273.22 371.209L274.72 390.921L322.22 389.577L320.22 369.921Z",
    'P73': "M315.22 327.921L268.22 329.27L269.72 349.921L317.22 348.513L315.22 327.921Z",
    'P74': "M322.22 389.991L367.241 388.921L369.22 410.316L324.199 411.921L322.22 389.991Z",
    'P75': "M204.3 397.991L249.321 396.921L251.3 418.316L206.279 419.921L204.3 397.991Z",
    'P76': "M226 121.5L161.206 126L155 124.5L150.5 121L149.5 116.5L160.821 81.635L181.321 80.635L224.5 78.4999L226 121.5Z",
    'P77': "M439.5 342L392.5 343.349L394 364L441.5 362.592L439.5 342Z",
    'P78': "M443.5 383L396.5 384.438L398 406.438L445.5 404.938L443.5 383Z",
    'P79': "M441.5 363L394.5 364.288L396 384L443.5 382.656L441.5 363Z",
    'P80': "M436.5 321L389.5 322.349L391 343L438.5 341.592L436.5 321Z",
    'P81': "M443.5 383.07L488.521 382L490.5 403.395L445.479 405L443.5 383.07Z",
    'P82': "M1186 101.5L1236.5 98.5L1240.5 99.5L1243.5 101.5L1245 104L1246.5 107V112.5L1239 130L1188 133L1186 101.5Z",
    'P83': "M1221.5 10.5L1287.5 6L1274 42.5L1271 47.5L1265 51L1223.5 54L1221.5 10.5Z",
    'P84': "M1178 14L1221 10.5L1223 54L1181.5 56.5L1178 14Z",
    'P85': "M1134.5 17.5L1177.5 14L1180.5 57L1137.5 60L1134.5 17.5Z",
    'P86': "M1090.5 20.5L1133.5 17L1136.5 60L1093.5 63L1090.5 20.5Z",
    'P87': "M1047.5 23.5L1090 21L1093 63L1050.5 66L1047.5 23.5Z",
    'P88': "M1004.5 26.5L1047 24L1050 66L1007.5 69L1004.5 26.5Z",
    'P89': "M961.5 29.5L1004 27L1007 69L964.5 72L961.5 29.5Z",
    'P90': "M1010.5 114L1028.5 112.5L1044 112L1046.5 112.5L1051 114L1053.5 118.5L1054.5 123.5L1057 153.5L1013.5 155L1010.5 114Z",
    'P91': "M1014.5 156L1057.5 154.5L1059.5 176L1015.5 177.5L1014.5 156Z",
    'P92': "M1016.41 178.5L1059.41 177L1061.41 198.5L1017.41 200L1016.41 178.5Z",
    'P93': "M1018.5 201.5L1061.5 200L1063 221L1020 223L1018.5 201.5Z",
    'P94': "M1020.5 224L1063.5 222.5L1065.5 243.5L1021.5 245L1020.5 224Z",
    'P95': "M1022.5 246L1066 244.5L1066.5 259L1067 266.5V273.86L1026.5 300.5L1022.5 246Z",
    'P96': "M980 272L1023 269.5L1025 301.5L996.5 322L983.5 315.5L980 272Z",
    'P97': "M977.5 249.5L1021 247.5L1022.5 268L979.5 270.5L977.5 249.5Z",
    'P98': "M975.5 227L1019 225L1020.5 245.5L977.5 248L975.5 227Z",
    'P99': "M973.5 204L1017 202L1018.5 222.5L975.5 225L973.5 204Z",
    'P100': "M971.5 182L1015 180L1016.5 200.5L973.5 203L971.5 182Z",
    'P101': "M969.5 159L1013 157L1014.5 177.5L971.5 180L969.5 159Z",
    'P102': "M966.5 124L969 119.5L973.5 116.5L1009.5 114.5L1012.5 155.5L991 157H969L966.5 124Z",
    'P103': "M893.5 122L927 120L933 122L936 125L938 129.5L940 161L897.5 163L893.5 122Z",
    'P104': "M897.5 164.5L940.5 163L942.5 184.5H899L897.5 164.5Z",
    'P105': "M899.5 186.5L942.5 185.5L944 205.5L901.5 207.5L899.5 186.5Z",
    'P106': "M902 209.5L944.5 207L946.5 228.5L903 230.5L902 209.5Z",
    'P107': "M903.5 231.5L946 229L948 250.5L904.5 252.5L903.5 231.5Z",
    'P108': "M905.5 254L949 252.5L950.5 272.5L907 275L905.5 254Z",
    'P109': "M907.5 276.5L951 275L952.5 295L909 297.5L907.5 276.5Z",
    'P110': "M909.5 298.5L953 297L954.5 317L911 319.5L909.5 298.5Z",
    'P111': "M912 321.5L954.5 318.5L956.5 349L954.5 352L925.5 371.5H915.5L912 321.5Z",
    'P112': "M870 355L913 353.5L914 372L871.5 375L870 355Z",
    'P113': "M868 334L911 332.5L912 351.5L869.5 354L868 334Z",
    'P114': "M866 313L909 311.5L910.5 330.5L867.5 332.5L866 313Z",
    'P115': "M864 293.5L907 291L908.5 310L866 312L864 293.5Z",
    'P116': "M862 272.5L905.5 270.5L906.5 289L864 291.5L862 272.5Z",
    'P117': "M860.5 251.5L903.5 250.5L905 269L862 270.5L860.5 251.5Z",
    'P118': "M858.5 230L901.5 229L903 247.5L860 249L858.5 230Z",
    'P119': "M856.5 209L899.5 208L901 226.5L858 228L856.5 209Z",
    'P120': "M854.5 188L897.5 187L899 205.5L856 207L854.5 188Z",
    'P121': "M853 168L896 165.5L897.5 185.5L854.5 187L853 168Z",
    'P122': "M849.5 133L851 130L853.5 127L857 124.5L892.5 122.5L895.5 163.5L852 166L849.5 133Z",
    'P123': "M750.5 362.5L795 360.5L796.5 380.5L752.5 383L750.5 362.5Z",
    'P124': "M749 341L793 339L794.5 359L750 362L749 341Z",
    'P125': "M747 319L791 317L792.5 337L748 340L747 319Z",
    'P126': "M744.5 297.5L789 295L790.5 315L746 317.5L744.5 297.5Z",
    'P127': "M743 275L787 273L788.5 293L744 296L743 275Z",
    'P128': "M741.5 255L742.5 254L744 252.5L747 250.5L748.5 250L785 247.5L786 271L742 274L741.5 255Z",
    'P129': "M668 255.5L706 253.5L709.5 255.5L712.5 258.5L713.5 262.5L714.5 277L670 279.5L668 255.5Z",
    'P130': "M671 280.5L714.5 278.5L715.5 298.5L672 301.5L671 280.5Z",
    'P131': "M672.5 302.5L716.5 300.5L718.5 320.5L674 323L672.5 302.5Z",
    'P132': "M674.5 324L718.5 322L720.5 342L676 344.5L674.5 324Z",
    'P133': "M676.5 346L720.5 344L722.5 364L678 366.5L676.5 346Z",
    'P134': "M678.5 367L722.5 365L724.5 386L680 388.5L678.5 367Z",
    'P135': "M634 370L678 367.5L679.5 388L635.5 390L634 370Z",
    'P136': "M631.5 348.5L676 346L677.5 366.5L633.5 368L631.5 348.5Z",
    'P137': "M630 326.5L674 323.965L675.5 344.465L631.5 346.5L630 326.5Z",
    'P138': "M627.5 304.535L671.5 302L673 322.5L629 324.535L627.5 304.535Z",
    'P139': "M625.5 282.535L669.5 280L671 300.5L627 302.535L625.5 282.535Z",
    'P140': "M624 265L626.5 260.5L630.5 257.5L667.5 255.5L669 279.5L625 281.5L624 265Z",
    'P141': "M551 263L587.5 260.5L592.5 262.5L594.5 265L596 269.5L597 284.5L553 286.5L551 263Z",
    'P142': "M552.5 288L596.5 286.5L598 307L554 309L552.5 288Z",
    'P143': "M554 309.553L598.978 307L601 329.979L556.022 331L554 309.553Z",
    'P144': "M557 331L601 330L603 351L559 353L557 331Z",
    'P145': "M559 353L603 351L605 373L561 375L559 353Z",
    'P146': "M561 375L605 373L607 395L563 397L561 375Z",
    'P147': "M515 377.5L561 375L562.5 397L517.543 399L515 377.5Z",
    'P148': "M513 355L558.5 353L560.772 375L515 377.5L513 355Z",
    'P149': "M510.5 333.5L556.5 332L558.5 353L513 355L510.5 333.5Z",
    'P150': "M508.5 311.587L554.5 309.5L556.5 331.935L510.5 333.5L508.5 311.587Z",
    'P151': "M506.5 290L552.5 288L554.5 309.5L508.5 311.5L506.5 290Z",
    'P152': "M549.5 263L512.5 265.5L509 268L506 272L505.5 277L507.143 290L529.572 288.75L552 287.5L549.5 263Z",
    'P153': "M268.5 75.5L309.5 72.5L312.5 116L271.5 119L268.5 75.5Z",
  };
  
  
  // Background paths that provide context
  const backgroundPaths = [
    // New Background Paths from svg.txt
    "M119 68.5L160 83L57 432.5L8 435.5L119 68.5Z",
    "M147.5 126.322L149 120L152 124L156 127L1265 51.5L1269.5 48.5L1273 45L1247 111L1245 102.5L1240 99L1234 98L719.5 134L134 172.322L147.5 126.322Z",
    "M223.5 172.5L220 169.5L208 167.5L260 164L255.5 167.5L253 171.5L264.5 291L278 418L249.5 419L237 292.5L225.5 176.5L223.5 172.5Z",
    "M344.5 166.5L340 162L333 159.5L379 156L375.5 158.5L373 161L377.5 220L384 282.5L391.5 346L394.5 378.5L398 409L370.5 410.5L363.5 347L356.5 284.5L350.5 220L347 187.5L344.5 166.5Z",
    "M748 249.5L741 255V267.748L744.5 304L748.5 346.872L750 366L752 384.877L725.5 385.5L722 346.872L717.5 306.687L714.5 267.748L712.5 257.5L704.5 252.5L748 249.5Z",
    "M820 127L849 124.5L857 124L852.5 128L849.5 132.5L853 186.5L860 249L865 312.5L867.5 341.5L870.5 375.5L843.5 377.5L837.5 312.5L832.5 251L826.5 186.5L823 154L821 133.5L817.5 129L811 127.5L820 127Z",
    "M924.5 119.5L965.5 116.5L973.5 116L969.438 119.5L966.5 124L969.438 171.5L974 224L979.5 282L983.31 316L997 321.5L956.5 349.5L952 279.642L948 227L942.686 171.5L940.5 144.5L937.5 126.5L932.5 121.5L924.5 119.5Z",
    "M1033 112L1081.5 108.5L1089.5 108L1082.5 116L1084.5 150L1087.5 189L1090.5 229.5L1092.5 242.5L1099.5 246.5L1105 248L1067.5 273.5L1065.5 231.5L1062 190.5L1058 150L1053.5 116.5L1051 115L1048 113.5L1046.5 112H1033Z",
    "M588.5 260L630 257.5L626.5 260.5L624 265L626 292.5L629 323L630.5 340.5L632 358L634 378L634.5 383L635.5 391.5L609 394L607.5 374.5L605.5 356.988L604 339.5L602.289 324.488L599.5 292.5L594.5 264L588.5 260Z",
    "M464.5 159.5L460.5 154.5L454.5 151.5L493 149L500.5 148.5L496 152L492 156.5L497.5 216L504 275L511.5 338.5L514.5 371L518 401.5L490.5 403L483.5 339.5L476.5 277L470.5 212.5L467 180L464.5 159.5Z",
    "M926 371.5L1036 294L1093 256.5L1225 166.5L1257 86L1289 5.5L1337 4V15L1321 52.5L1303 99.5L1264.5 195L1013 367.5L926 371.5Z",
    "M500.5 239.5L499.5 232.5L507 239L823 218L826.5 214.5L829 210.5L833 254.5L830 249.5L825 244.5L512 265.5L507 270.5L504.5 280L503 266.5L500.5 239.5Z",
    "M614 52.5L660 50.5L663.5 84L666 89L668.5 90.5L671 92L610.5 96L614.5 93.5L616 90L614 52.5Z"
  ];
  
  export const PlotOverlay = ({ onPlotClick }) => {
    const [hoveredPlot, setHoveredPlot] = useState(null);
  
    const handlePlotClick = (plotId) => {
      // Don't handle clicks for open spaces and amenities (P1-P5)
      if (['P1', 'P2', 'P3', 'P4', 'P5'].includes(plotId)) return;
      
      const plotDetail = plotData[plotId];
      if (plotDetail && plotDetail.status !== 'booked') {
        onPlotClick(plotId);
      }
    };
  
    const handlePlotHover = (plotId) => {
      setHoveredPlot(plotId);
    };
  
    const handlePlotLeave = () => {
      setHoveredPlot(null);
    };
  
    const getPlotColor = (status) => {
      switch (status) {
        case 'available':
          return '#0066cc';
        case 'booked':
          return '#cc0000';
        case 'pending':
          return '#ff9900';
        case 'open_space':
          return '#90EE90';
        case 'amenity':
          return '#FFB6C1';
        default:
          return '#cccccc';
      }
    };
  
    const getPlotStyle = (plotId) => {
      const isHovered = hoveredPlot === plotId;
      const plot = plotData[plotId];
      const baseColor = getPlotColor(plot?.status || 'available');
  
      return {
        fill: baseColor,
        fillOpacity: isHovered ? 0.8 : 0.6,
        stroke: isHovered ? '#ffffff' : '#000000',
        strokeWidth: isHovered ? 2 : 1,
        cursor: 'pointer',
        transition: 'all 0.3s ease'
      };
    };
  
    return (
      <div className="relative w-full h-full">
        <svg
          width="100%"
          height="100%"
          viewBox="0 0 1400 1000"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          style={{ position: 'absolute', top: 0, left: 0 }}
          preserveAspectRatio="xMidYMid meet"
        >
          {/* Add shadow filter */}
          <defs>
            <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
              <feDropShadow dx="2" dy="2" stdDeviation="3" floodOpacity="0.3" />
            </filter>
            <linearGradient id="availableFill" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="100%" stopColor="#3b82f6" stopOpacity="0.6" />
              <stop offset="100%" stopColor="#2563eb" stopOpacity="0.7" />
            </linearGradient>
            <linearGradient id="soldFill" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#ef4444" stopOpacity="0.6" />
              <stop offset="100%" stopColor="#dc2626" stopOpacity="0.7" />
            </linearGradient>
            <linearGradient id="reservedFill" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#f97316" stopOpacity="0.6" />
              <stop offset="100%" stopColor="#ea580c" stopOpacity="0.7" />
            </linearGradient>
            {/* Add text shadow filter */}
            <filter id="textShadow" x="-50%" y="-50%" width="200%" height="200%">
              <feDropShadow dx="0" dy="0" stdDeviation="2" floodColor="black" floodOpacity="0.5"/>
            </filter>
          </defs>
  
          {/* Background Paths */}
          {backgroundPaths.map((pathD, index) => (
            <g key={`bg-${index}`}>
              <path
                d={pathD}
                className="fill-gray-700"
                style={{ pointerEvents: 'none' }}
              />
              {/* Add road text labels for diagonal roads */}
              {(index === 1 || index === 2) && (
                <text
                  x={index === 1 ? "250" : "750"}
                  y={index === 1 ? "250" : "250"}
                  textAnchor="middle"
                  dominantBaseline="middle"
                  className="text-white font-bold pointer-events-none"
                  style={{ 
                    fontSize: '16px',
                    filter: 'url(#textShadow)',
                    fill: 'white',
                    stroke: 'black',
                    strokeWidth: '0.5px',
                    transformOrigin: `${index === 1 ? '250px' : '750px'} 250px`,
                    transform: `rotate(-75deg)`
                  }}
                >
                  40ft Wide Road
                </text>
              )}
              {/* Add road text label for top horizontal road */}
              {index === 0 && (
                <text
                  x="650"
                  y="45"
                  textAnchor="middle"
                  dominantBaseline="middle"
                  className="text-white font-bold pointer-events-none"
                  style={{ 
                    fontSize: '16px',
                    filter: 'url(#textShadow)',
                    fill: 'white',
                    stroke: 'black',
                    strokeWidth: '0.5px'
                  }}
                >
                  60ft Wide Road
                </text>
              )}
            </g>
          ))}
  
          {/* Plot Areas */}
          {Object.entries(plotPaths).map(([plotNumber, pathD]) => {
            const isHovered = hoveredPlot === plotNumber;
            const plotDetail = plotData[plotNumber];
            const status = plotDetail?.status || 'available';
            const centroid = calculateCentroid(pathD);
  
            // Special handling for open spaces and amenities (P1-P5)
            if (['P1', 'P2', 'P3', 'P4', 'P5'].includes(plotNumber)) {
              const isOpenSpace = ['P1', 'P2'].includes(plotNumber);
              const adjustedY = centroid.y;
              const adjustedX = centroid.x;
              return (
                <g key={plotNumber}>
                  <path
                    d={pathD}
                    className={isOpenSpace ? "fill-green-500" : "fill-yellow-500"}
                    stroke={isOpenSpace ? "#4CAF50" : "#FFB6C1"}
                    strokeWidth="1.5"
                  />
                  <text
                    x={adjustedX}
                    y={adjustedY}
                    textAnchor="middle"
                    dominantBaseline="middle"
                    className="text-white font-bold pointer-events-none"
                    style={{ 
                      fontSize: '16px',
                      filter: 'url(#textShadow)',
                      fill: 'white',
                      stroke: 'black',
                      strokeWidth: '0.5px'
                    }}
                  >
                    {isOpenSpace ? "OPEN SPACE" : "AMENITY"}
                  </text>
                </g>
              );
            }
  
            const getColors = (status) => {
              switch (status) {
                case 'available':
                  return {
                    fill: 'url(#availableFill)',
                    stroke: '#3b82f6'
                  };
                case 'booked':
                  return {
                    fill: 'url(#soldFill)',
                    stroke: '#ef4444'
                  };
                case 'pending':
                  return {
                    fill: 'url(#reservedFill)',
                    stroke: '#f97316'
                  };
                default:
                  return {
                    fill: '#cccccc',
                    stroke: '#999999'
                  };
              }
            };
  
            const colors = getColors(status);
  
            return (
              <g key={plotNumber}>
                <path
                  d={pathD}
                  fill={colors.fill}
                  stroke={colors.stroke}
                  strokeWidth={isHovered ? 2 : 1}
                  style={{
                    cursor: status === 'booked' ? 'not-allowed' : 'pointer',
                    filter: isHovered ? 'url(#shadow)' : 'none',
                    transition: 'all 0.2s ease-in-out'
                  }}
                  onClick={() => handlePlotClick(plotNumber)}
                  onMouseEnter={() => handlePlotHover(plotNumber)}
                  onMouseLeave={handlePlotLeave}
                />
                <text
                  x={centroid.x}
                  y={centroid.y}
                  textAnchor="middle"
                  dominantBaseline="middle"
                  className="pointer-events-none font-semibold"
                  style={{
                    fill: isHovered ? '#ffffff' : '#000000',
                    fontSize: '12px',
                    filter: 'url(#textShadow)',
                    transition: 'all 0.2s ease-in-out'
                  }}
                >
                  {plotNumber}
                </text>
              </g>
            );
          })}
        </svg>
      </div>
    );
  };
